#include "map.h"
template<typename K, typename V>
class BstMap : public Map<K, V> {
 private:
  class Node {
    K key;
    V value;
    Node * left;
    Node * right;
    Node(K _key, V _value, Node * _left = NULL, Node * _right = NULL) :
        key(_key),
        value(_value),
        left(_left),
        right(_right) {}
  };
  Node * root;
  BstMap() : root(NULL) {}

 public:
  void add(const K & key, const V & value) {
    Node ** current = &root;
    while (*current != NULL) {
      if (key >= (*current)->key) {
        current = &(*current)->right;
      }
      else {
        current = &(*current)->left;
      }
    }
    *current = new Node(key, value);
  }

  const V & lookup(const K & key) const throw(std::invalid_argument) {
    Node * current = root;
    while (root != NULL) {
      if (current->key == key) {
        return current->value;
      }
      else if (current->key < key) {
        current = current->left;
      }
      else {
        current = current->right;
      }
    }
    throw std::invalid_argument("key not found!");
  }

  Node * findandremove(const K & toRemove, Node * current) {
    if (current == NULL) {
      return current;
    }
    else if (current->key == toRemove) {
      if (current->left == NULL) {
        Node * temp = current->right;
        delete current;
        return temp;
      }
      else if (current->right == NULL) {
        Node * temp = current->left;
        delete current;
        return temp;
      }
      else {
        Node ** changenode = &current->left;
        while ((*changenode)->right != NULL) {
          changenode = changenode->right;
        }
        current->data = (*changenode)->data;
        *changenode = findandremove((*changenode)->data, *changenode);
        return current;
      }
    }
  }
  void remove(const K & key) { findandremove(key, root); }
};
